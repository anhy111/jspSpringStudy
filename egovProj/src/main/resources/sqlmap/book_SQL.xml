<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.mapper.BookMapper">

	<resultMap type="bookVO" id="bookMap">
		<result property="bookId" column="BOOK_ID" />
		<result property="title" column="TITLE" />
		<result property="category" column="CATEGORY" />
		<result property="price" column="PRICE" />
		<result property="insertDate" column="INSERT_DATE" />
		<result property="content" column="CONTENT" 
				javaType="java.lang.String"  jdbcType="CLOB"  />
		<collection property="attachVOList" resultMap="attachMap" ></collection>
	</resultMap>
	
	<resultMap type="attachVO" id="attachMap">
		<result property="userNo" column="USER_NO" />
		<result property="seq" column="SEQ" />
		<result property="filename" column="FILENAME" />
		<result property="filesize" column="FILESIZE" />
		<result property="regdate" column="REGDATE" />
	</resultMap>
	 
	<select id="list" resultType="bookVO">
	
		SELECT BOOK_ID, TITLE, CATEGORY, PRICE, CONTENT, INSERT_DATE
		FROM   BOOK
		
	</select>
	

	
	<!-- 
		content 컬럼
		CLOB 타입의 데이터를 MyBatis를 이용해 처리할 때는 resultMap 태그를 만들고 
		타입을 지정해줘야 함. CLOB -> String 매핑
		java database connectivity의 type : CLOB
		java type : java.lang.String 
	 -->

	 
	<select id="detail" parameterType="String" resultMap="bookMap">
	
		SELECT BOOK_ID, TITLE, CATEGORY, PRICE, CONTENT, INSERT_DATE
		FROM BOOK 
		WHERE BOOK_ID = ${bookId}
		
	</select>
	
	<update id="updateBook" parameterType="bookVO">
	
		UPDATE BOOK
		SET 
			TITLE = #{title}
		  , CATEGORY=#{category}
		  , PRICE = #{price}
		  , CONTENT = #{content}
		  , INSERT_DATE = SYSDATE
		WHERE 
		    BOOK_ID = #{bookId}
	
	</update>
	
	<delete id="delete" parameterType="BookVO">
		delete from book
		where book_id = #{bookId}
	</delete>
	
	<insert id="insert" parameterType="bookVO">
		<selectKey order="AFTER" keyProperty="bookId" resultType="int">
			SELECT MAX(BOOK_ID) FROM BOOK
		</selectKey>
	
		MERGE INTO BOOK B
		USING DUAL ON(B.BOOK_ID = #{bookId}) 
		WHEN MATCHED THEN
		    UPDATE SET 
				TITLE = #{title}
			  , CATEGORY=#{category}
			  , PRICE = #{price}
			  , CONTENT = #{content}
			  , INSERT_DATE = SYSDATE
		WHEN NOT MATCHED THEN
		    INSERT (BOOK_ID,TITLE, CATEGORY, PRICE, INSERT_DATE, CONTENT)
		    VALUES((SELECT NVL(MAX(BOOK_ID),0) + 1 FROM BOOK)
		    		,#{title},#{category},#{price},SYSDATE,#{content})
	</insert>
	
	<select id="getBookId" resultType="int">
	
		SELECT NVL(MAX(BOOK_ID),0)+1 bookId FROM BOOK
	
	</select>
	
	<select id="searchBook" parameterType="bookVO" resultMap="bookMap">
	
		WITH T AS(
			SELECT B.BOOK_ID, B.TITLE, B.CATEGORY, B.PRICE, B.INSERT_DATE, B.CONTENT
			        ,A.USER_NO, A.SEQ, A.FILENAME, A.FILESIZE, A.REGDATE
			FROM BOOK B LEFT OUTER JOIN ATTACH A ON(B.BOOK_ID = A.USER_NO)
		)
		SELECT * FROM T
		WHERE 1=1
		AND (TITLE LIKE '%' || #{title} || '%' 
		    OR CATEGORY LIKE '%' || #{title} || '%' 
		    OR CONTENT LIKE '%' || #{title} || '%' ) 
		
	</select>
</mapper>










